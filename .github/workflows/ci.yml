name: CI

on:
  push:
    tags:
      - "v*"
  pull_request:
    branches:
      - main

jobs:

  lint:
    name: Lint and format checks
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Check out source code
        uses: actions/checkout@v4
      - name: Run checks
        uses: astral-sh/ruff-action@v3

  build:
    name: Build ${{ matrix.os }} (py${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    needs: lint
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            python-version: "3.9"
          - os: macos-latest
            python-version: "3.9"
          # TODO: abi3 on Windows?
          - os: windows-latest
            python-version: "3.9"
          - os: windows-latest
            python-version: "3.10"
          - os: windows-latest
            python-version: "3.11"
          - os: windows-latest
            python-version: "3.12"
          - os: windows-latest
            python-version: "3.13"
    steps:
      - name: Check out source code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Install build dependencies
        run: python -m pip install --upgrade build twine setuptools-golang wheel setuptools
      - name: Build package
        shell: bash
        run: |
          python -m build
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            setuptools-golang-build-manylinux-wheels --golang=1.23.10 --pythons=cp39-cp39
          fi
          python -m twine check --strict dist/*
      - name: Test wheel installation (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $wheels = Get-ChildItem dist/*.whl
          python -m venv test_env
          .\\test_env\\Scripts\\Activate.ps1
          python -m pip install pytest
          python -m pip install $wheels[0].FullName
          python -m pytest
          deactivate
      - name: Test wheel installation (macOS/Linux)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          python -m venv test_env
          source test_env/bin/activate
          python -m pip install pytest
          python -m pip install dist/*.whl
          python -m pytest
          deactivate
      - name: Upload package artifacts
        uses: actions/upload-artifact@v4
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
        with:
          name: python-package-${{ matrix.os }}-py${{ matrix.python-version }}
          path: dist/*

  release:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    environment: release
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Check out source code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: all_build_artifacts
      - name: Prepare packages for publishing
        shell: bash
        run: |
          mkdir -p dist
          find all_build_artifacts -type f \( -name '*.whl' -o -name '*.tar.gz' \) -exec cp {} dist/ \;
          echo "Contents of dist/ before publishing:"
          ls -R dist
      - name: Upload distribution packages to PyPI
        id: pypi
        uses: pypa/gh-action-pypi-publish@release/v1
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create ${{ github.ref_name }} --title "${{ github.ref_name }}" --generate-notes
        if: steps.pypi.outcome == 'success'
